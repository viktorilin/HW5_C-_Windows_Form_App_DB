[{"Id":5,"CodeText":"public class Program\r\n{\r\n    public static int Addition(int a, int b)\r\n    {\r\n        return a + 9+b;\r\n    }\r\n}","Error":null,"IsFavouriteCode":true,"Result":"Total:3; Passed:3; Failed:0; Duration:1.028194","UserCodeId":4,"time":"2018-05-21T11:51:26.3727236"},{"Id":6,"CodeText":"public class Elevator\r\n    {\r\n        public Status Direction { get; set; }\r\n        public int CurrentFloor { get; set; }\r\n        public int ResultFloor { get; set; }\r\n\r\n        public Elevator(int currentFloor, int resultFloor)\r\n        {\r\n            this.CurrentFloor = currentFloor;\r\n            this.ResultFloor = resultFloor;\r\n            if (CurrentFloor - ResultFloor > 0)\r\n            {\r\n                Direction = Status.Down;\r\n            }\r\n            else if (CurrentFloor - ResultFloor < 0)\r\n            {\r\n                Direction = Status.Up;\r\n            }\r\n            else\r\n            {\r\n                Direction = Status.Stop;\r\n            }\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return CurrentFloor == ((Elevator)obj).CurrentFloor && ResultFloor == ((Elevator)obj).ResultFloor;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return CurrentFloor.GetHashCode() + ResultFloor.GetHashCode();\r\n        }\r\n    }\r\n\r\n    public class Person\r\n    {\r\n        public Status Direction { get; set; }\r\n        public int Floor { get; set; }\r\n\r\n        public Person(Status state, int floor)\r\n        {\r\n            this.Direction = state;\r\n            this.Floor = floor;\r\n        }\r\n    }\r\n\r\n    public enum Status\r\n    {\r\n        Stop, Up, Down\r\n    }\r\n\r\n    public class ElevatorSelector\r\n    {\r\n        private List<Elevator> Elevators;\r\n\r\n        public ElevatorSelector(params Elevator[] items)\r\n        {\r\n            Elevators = new List<Elevator>();\r\n            foreach (var item in items)\r\n            {\r\n                Elevators.Add(item);\r\n            }\r\n        }\r\n\r\n        public Elevator Find(Person person)\r\n        {\r\n            if (Elevators.Count != 0)\r\n            {\r\n                bool isAnyPast = false;\r\n                int minOptimalTimeForPast = Int16.MaxValue;\r\n                int minOptimalTime = Int16.MaxValue;\r\n                Elevator optimal = null;\r\n                foreach (var elevator in Elevators)\r\n                {\r\n                    if (person.Direction == elevator.Direction &&\r\n                        (\r\n                          (person.Floor >= elevator.CurrentFloor && person.Floor <= elevator.ResultFloor) ||\r\n                          (person.Floor >= elevator.ResultFloor && person.Floor <= elevator.CurrentFloor)\r\n                        )\r\n                       )\r\n                    {\r\n                        if (Math.Abs(person.Floor - elevator.CurrentFloor) < minOptimalTimeForPast)\r\n                        {\r\n                            minOptimalTimeForPast = Math.Abs(person.Floor - elevator.CurrentFloor);\r\n                            optimal = elevator;\r\n                        }\r\n                        isAnyPast = true;\r\n                    }\r\n                    else if (!isAnyPast)\r\n                    {\r\n                        int temp = Math.Abs(elevator.CurrentFloor - elevator.ResultFloor) + Math.Abs(person.Floor - elevator.ResultFloor);\r\n                        if (temp < minOptimalTime)\r\n                        {\r\n                            minOptimalTime = temp;\r\n                            optimal = elevator;\r\n                        }\r\n                    }\r\n                }\r\n                return optimal;\r\n            }\r\n            return null;\r\n        }\r\n    }","Error":null,"IsFavouriteCode":false,"Result":"Total:4; Passed:4; Failed:0; Duration:1.128995","UserCodeId":5,"time":"2018-05-21T12:16:38.662824"},{"Id":7,"CodeText":"public class Elevator\r\n    {\r\n        public Status Direction { get; set; }\r\n        public int CurrentFloor { get; set; }\r\n        public int ResultFloor { get; set; }\r\n\r\n        public Elevator(int currentFloor, int resultFloor)\r\n        {\r\n            this.CurrentFloor = currentFloor;\r\n            this.ResultFloor = resultFloor;\r\n            if (CurrentFloor - ResultFloor > 0)\r\n            {\r\n                Direction = Status.Down;\r\n            }\r\n            else if (CurrentFloor - ResultFloor < 0)\r\n            {\r\n                Direction = Status.Up;\r\n            }\r\n            else\r\n            {\r\n                Direction = Status.Stop;\r\n            }\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return CurrentFloor == ((Elevator)obj).CurrentFloor && ResultFloor == ((Elevator)obj).ResultFloor;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return CurrentFloor.GetHashCode() + ResultFloor.GetHashCode();\r\n        }\r\n    }\r\n\r\n    public class Person\r\n    {\r\n        public Status Direction { get; set; }\r\n        public int Floor { get; set; }\r\n\r\n        public Person(Status state, int floor)\r\n        {\r\n            this.Direction = state;\r\n            this.Floor = floor;\r\n        }\r\n    }\r\n\r\n    public enum Status\r\n    {\r\n        Stop, Up, Down\r\n    }\r\n\r\n    public class ElevatorSelector\r\n    {\r\n        private List<Elevator> Elevators;\r\n\r\n        public ElevatorSelector(params Elevator[] items)\r\n        {\r\n            Elevators = new List<Elevator>();\r\n            foreach (var item in items)\r\n            {\r\n                Elevators.Add(item);\r\n            }\r\n        }\r\n\r\n        public Elevator Find(Person person)\r\n        {\r\n            if (Elevators.Count != 0)\r\n            {\r\n                bool isAnyPast = false;\r\n                int minOptimalTimeForPast = Int16.MaxValue;\r\n                int minOptimalTime = Int16.MaxValue;\r\n                Elevator optimal = null;\r\n                foreach (var elevator in Elevators)\r\n                {\r\n                    if (person.Direction == elevator.Direction &&\r\n                        (\r\n                          (person.Floor >= elevator.CurrentFloor && person.Floor <= elevator.ResultFloor) ||\r\n                          (person.Floor >= elevator.ResultFloor && person.Floor <= elevator.CurrentFloor)\r\n                        )\r\n                       )\r\n                    {\r\n                        if (Math.Abs(person.Floor - elevator.CurrentFloor) < minOptimalTimeForPast)\r\n                        {\r\n                            minOptimalTimeForPast = Math.Abs(person.Floor - elevator.CurrentFloor);\r\n                            optimal = elevator;\r\n                        }\r\n                        isAnyPast = true;\r\n                    }\r\n                    else if (!isAnyPast)\r\n                    {\r\n                        int temp = Math.Abs(elevator.CurrentFloor - elevator.ResultFloor) + Math.Abs(person.Floor - elevator.ResultFloor);\r\n                        if (temp < minOptimalTime)\r\n                        {\r\n                            minOptimalTime = temp;\r\n                            optimal = elevator;\r\n                        }\r\n                    }\r\n                }\r\n                return optimal;\r\n            }\r\n            return null;\r\n        }\r\n    }","Error":null,"IsFavouriteCode":false,"Result":"Total:4; Passed:4; Failed:0; Duration:1.024362","UserCodeId":5,"time":"2018-05-21T12:21:49.183808"},{"Id":2011,"CodeText":"public class Program\r\n{\r\n    public static int Addition(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n}","Error":"Compile errors","IsFavouriteCode":false,"Result":null,"UserCodeId":4,"time":"2018-06-13T19:02:01.0087823"},{"Id":3010,"CodeText":"public class Program\r\n{\r\n    public static int Addition(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n}","Error":"Compile errors","IsFavouriteCode":false,"Result":null,"UserCodeId":4,"time":"2018-06-13T19:11:35.8720127"},{"Id":3011,"CodeText":"public class Program\r\n{\r\n    public static int Addition(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n}","Error":null,"IsFavouriteCode":false,"Result":"Total:; Passed:; Failed:; Duration:","UserCodeId":4,"time":"2018-06-13T19:14:29.8592364"},{"Id":3012,"CodeText":"public class Program\r\n{\r\n    public static int Addition(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n}","Error":null,"IsFavouriteCode":false,"Result":"Total:3; Passed:3; Failed:0; Duration:1.143385","UserCodeId":4,"time":"2018-06-13T19:14:55.228592"},{"Id":3016,"CodeText":"public class Indexer\r\n{\r\n        private int[] TargetArray { get; set; }\r\n\r\n        public Indexer(int[] arr)\r\n        {\r\n            TargetArray = arr;\r\n        }\r\n\r\n        public int this[int index]\r\n        {\r\n            get\r\n            {\r\n                if (index >= 0 && index < TargetArray.Length)\r\n                {\r\n                    return TargetArray[index];\r\n                }\r\n                return -1;\r\n            }\r\n            set\r\n            {\r\n                if (index >= 0 && index < TargetArray.Length)\r\n                {\r\n                    TargetArray[index] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        public int TestMethod(int value)\r\n        {\r\n            return Array.IndexOf(TargetArray, value);\r\n        }\r\n}","Error":null,"IsFavouriteCode":false,"Result":"Total:2; Passed:2; Failed:0; Duration:0.945118","UserCodeId":3010,"time":"2018-06-13T20:38:15.9609252"}]